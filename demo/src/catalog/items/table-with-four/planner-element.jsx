import * as Three from "three";
import React from "react";
import { Button } from "@mui/material";

const RADIUS = 20;
const HEIGHT = 40;

export default {
  name: "table-with-four",
  prototype: "items",

  info: {
    tag: ["furnishings"],
    title: "Four",
    description: "table-with-four",
    image: require("./oneTable.png"),
  },

  properties: {
    width: {
      label: "width",
      type: "length-measure",
      defaultValue: {
        length: 350,
        unit: "cm",
      },
    },
    depth: {
      label: "depth",
      type: "length-measure",
      defaultValue: {
        length: 250,
        unit: "cm",
      },
    },
    height: {
      label: "height",
      type: "length-measure",
      defaultValue: {
        length: 80,
        unit: "cm",
      },
    },
    altitude: {
      label: "altitude",
      type: "length-measure",
      defaultValue: {
        length: 0,
        unit: "cm",
      },
    },
  },
  render2D: function (element, layer, scene) {
    let angle = element.rotation + 90;
    // const WIDTH = 150;
    // const DEPTH = 160;
    const HEIGHT = 50;
    let textRotation = 0;
    if (Math.sin((angle * Math.PI) / 180) < 0) {
      textRotation = 180;
    }
    let WIDTH = element.properties.get("width").get("length");
    let DEPTH = element.properties.get("depth").get("length");

    return (
      <g
        transform={`translate(${-WIDTH / 2},${-DEPTH / 2})`}
        // onClick={() => alert(`hoiiiiiiii ${element.id}`)}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width={WIDTH}
          height={DEPTH}
          viewBox="0 0 150 177"
          version="1.1"
          fill="#964B00"
          style={{ position: "relative", zIndex: 1000 }}
        >
          <g id="surface1">
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 86.375 34.898438 C 92.136719 34.898438 97.691406 36.101562 102.902344 38.46875 L 103.371094 38.683594 L 103.492188 38.183594 C 103.636719 37.59375 103.707031 36.972656 103.707031 36.332031 L 103.707031 18.601562 L 73.601562 18.601562 L 73.601562 34.902344 L 86.371094 34.902344 Z M 86.375 34.898438 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 73.601562 13.546875 L 103.707031 13.546875 L 103.707031 17.40625 L 73.601562 17.40625 Z M 73.601562 13.546875 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 23.492188 38.183594 L 23.613281 38.683594 L 24.078125 38.46875 C 29.289062 36.101562 34.851562 34.898438 40.625 34.898438 L 53.375 34.898438 L 53.375 18.59375 L 23.273438 18.59375 L 23.273438 36.324219 C 23.273438 36.957031 23.34375 37.582031 23.492188 38.175781 Z M 23.492188 38.183594 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 23.273438 13.546875 L 53.375 13.546875 L 53.375 17.40625 L 23.273438 17.40625 Z M 23.273438 13.546875 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 73.601562 132.59375 L 103.707031 132.59375 L 103.707031 136.46875 L 73.601562 136.46875 Z M 73.601562 132.59375 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 86.375 115.113281 L 73.609375 115.113281 L 73.609375 131.398438 L 103.710938 131.398438 L 103.710938 113.667969 C 103.710938 113.0625 103.644531 112.453125 103.515625 111.84375 L 103.402344 111.328125 L 102.921875 111.546875 C 97.710938 113.914062 92.140625 115.117188 86.375 115.117188 Z M 86.375 115.113281 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 23.273438 113.667969 L 23.273438 131.398438 L 53.375 131.398438 L 53.375 115.113281 L 40.625 115.113281 C 34.863281 115.113281 29.289062 113.910156 24.0625 111.542969 L 23.578125 111.324219 L 23.46875 111.839844 C 23.335938 112.464844 23.273438 113.0625 23.273438 113.664062 Z M 23.273438 113.667969 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(96.078431%,90.196078%,77.254902%)",
                fillOpacity: "1",
              }}
              d="M 23.273438 132.59375 L 53.375 132.59375 L 53.375 136.46875 L 23.273438 136.46875 Z M 23.273438 132.59375 "
            />
            <path
              className="order_table"
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(62.352941%,53.333333%,43.529412%)",
                fillOpacity: "1",
              }}
              d="M 24.414062 39.617188 C 23.78125 39.886719 23.152344 40.203125 22.546875 40.550781 C 9.667969 47.296875 1.664062 60.496094 1.664062 75.007812 C 1.664062 89.519531 9.667969 102.703125 22.539062 109.464844 C 23.207031 109.828125 23.816406 110.125 24.402344 110.382812 C 29.519531 112.734375 34.972656 113.925781 40.617188 113.925781 L 86.371094 113.925781 C 92.003906 113.925781 97.457031 112.734375 102.5625 110.390625 C 103.167969 110.125 103.785156 109.824219 104.433594 109.472656 C 117.308594 102.710938 125.3125 89.511719 125.3125 75.007812 C 125.3125 60.507812 117.308594 47.289062 104.441406 40.554688 C 103.832031 40.203125 103.195312 39.886719 102.570312 39.617188 C 97.453125 37.265625 92 36.074219 86.371094 36.074219 L 40.617188 36.074219 C 34.972656 36.074219 29.515625 37.265625 24.410156 39.617188 Z M 24.414062 39.617188 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(0%,0%,0%)",
                fillOpacity: "1",
              }}
              d="M 60.660156 125.144531 C 60.660156 124.578125 60.203125 124.121094 59.636719 124.121094 C 59.070312 124.121094 58.613281 124.578125 58.613281 125.144531 C 58.613281 137.722656 49.515625 147.960938 38.332031 147.960938 C 27.148438 147.960938 18.050781 137.726562 18.050781 125.144531 C 18.050781 124.578125 17.59375 124.121094 17.027344 124.121094 C 16.460938 124.121094 16.003906 124.578125 16.003906 125.144531 C 16.003906 138.847656 26.019531 150 38.328125 150 C 50.632812 150 60.648438 138.847656 60.648438 125.144531 Z M 60.660156 125.144531 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(0%,0%,0%)",
                fillOpacity: "1",
              }}
              d="M 108.949219 125.144531 C 108.949219 137.722656 99.851562 147.960938 88.667969 147.960938 C 77.484375 147.960938 68.386719 137.726562 68.386719 125.144531 C 68.386719 124.578125 67.929688 124.121094 67.363281 124.121094 C 66.796875 124.121094 66.339844 124.578125 66.339844 125.144531 C 66.339844 138.847656 76.355469 150 88.664062 150 C 100.96875 150 110.984375 138.847656 110.984375 125.144531 C 110.984375 124.578125 110.527344 124.121094 109.960938 124.121094 C 109.394531 124.121094 108.9375 124.578125 108.9375 125.144531 Z M 108.949219 125.144531 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(0%,0%,0%)",
                fillOpacity: "1",
              }}
              d="M 18.054688 24.855469 C 18.054688 12.277344 27.152344 2.039062 38.335938 2.039062 C 49.523438 2.039062 58.621094 12.277344 58.621094 24.855469 C 58.621094 25.421875 59.074219 25.878906 59.640625 25.878906 C 60.207031 25.878906 60.664062 25.421875 60.664062 24.855469 C 60.660156 11.152344 50.648438 0 38.335938 0 C 26.023438 0 16.015625 11.152344 16.015625 24.855469 C 16.015625 25.421875 16.472656 25.878906 17.039062 25.878906 C 17.605469 25.878906 18.0625 25.421875 18.0625 24.855469 Z M 18.054688 24.855469 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(0%,0%,0%)",
                fillOpacity: "1",
              }}
              d="M 66.339844 24.855469 C 66.339844 25.421875 66.796875 25.878906 67.363281 25.878906 C 67.929688 25.878906 68.386719 25.421875 68.386719 24.855469 C 68.386719 12.277344 77.484375 2.039062 88.667969 2.039062 C 99.851562 2.039062 108.949219 12.277344 108.949219 24.855469 C 108.949219 25.421875 109.40625 25.878906 109.972656 25.878906 C 110.539062 25.878906 110.996094 25.421875 110.996094 24.855469 C 110.996094 11.152344 100.980469 0 88.671875 0 C 76.367188 0 66.351562 11.152344 66.351562 24.855469 Z M 66.339844 24.855469 "
            />
            <path
              style={{
                stroke: "none",
                fillRule: "nonzero",
                fill: "rgb(0%,0%,0%)",
                fillOpacity: "1",
              }}
              d="M 105.34375 18 C 105.34375 18 105.328125 18 105.328125 17.984375 L 105.328125 11.925781 L 71.992188 11.925781 L 71.992188 34.476562 L 54.996094 34.476562 L 54.996094 18.035156 C 54.996094 18.035156 55.011719 18.015625 55.011719 18 L 54.996094 17.984375 L 54.996094 11.925781 L 21.65625 11.925781 L 21.65625 36.324219 C 21.65625 37.242188 21.777344 38.144531 22.011719 38.996094 C 8.988281 45.742188 0.0664062 59.351562 0.0664062 75.007812 C 0.0664062 90.664062 8.988281 104.257812 22.011719 111.015625 C 21.777344 111.867188 21.65625 112.75 21.65625 113.667969 L 21.65625 138.085938 L 54.996094 138.085938 L 54.996094 132.011719 L 55.011719 131.992188 C 55.011719 131.992188 54.996094 131.976562 54.996094 131.960938 L 54.996094 115.542969 L 71.992188 115.542969 L 71.992188 138.089844 L 105.328125 138.089844 L 105.328125 132.015625 C 105.328125 132.015625 105.34375 132 105.34375 132 C 105.34375 131.984375 105.328125 131.984375 105.328125 131.984375 L 105.328125 113.675781 C 105.328125 112.757812 105.207031 111.871094 104.96875 111.019531 C 118.011719 104.28125 126.933594 90.667969 126.933594 75.015625 C 126.933594 59.359375 118.011719 45.746094 104.96875 39.007812 C 105.207031 38.15625 105.328125 37.253906 105.328125 36.335938 L 105.328125 18.027344 C 105.328125 18.027344 105.34375 18.027344 105.34375 18.011719 Z M 74.03125 16.980469 L 74.03125 13.96875 L 103.28125 13.96875 L 103.28125 16.980469 Z M 23.699219 16.980469 L 23.699219 13.96875 L 52.953125 13.96875 L 52.953125 16.980469 Z M 52.953125 133.015625 L 52.953125 136.042969 L 23.699219 136.042969 L 23.699219 133.015625 Z M 103.28125 133.015625 L 103.28125 136.042969 L 74.03125 136.042969 L 74.03125 133.015625 Z M 23.699219 36.332031 L 23.699219 19.027344 L 52.953125 19.027344 L 52.953125 34.480469 L 40.625 34.480469 C 34.664062 34.480469 28.992188 35.769531 23.902344 38.089844 C 23.765625 37.527344 23.699219 36.929688 23.699219 36.335938 Z M 52.953125 130.976562 L 23.699219 130.976562 L 23.699219 113.667969 C 23.699219 113.074219 23.765625 112.492188 23.886719 111.933594 C 28.992188 114.246094 34.664062 115.542969 40.625 115.542969 L 52.953125 115.542969 Z M 103.28125 113.667969 L 103.28125 130.976562 L 74.03125 130.976562 L 74.03125 115.542969 L 86.375 115.542969 C 92.335938 115.542969 98.007812 114.25 103.097656 111.933594 C 103.21875 112.492188 103.28125 113.074219 103.28125 113.667969 Z M 102.398438 40.007812 C 103.03125 40.273438 103.640625 40.582031 104.238281 40.921875 C 116.496094 47.339844 124.894531 60.222656 124.894531 75.007812 C 124.894531 89.796875 116.503906 102.660156 104.238281 109.09375 C 103.644531 109.417969 103.03125 109.726562 102.398438 109.992188 C 97.511719 112.242188 92.097656 113.5 86.375 113.5 L 40.625 113.5 C 34.902344 113.5 29.472656 112.242188 24.585938 109.992188 C 23.953125 109.71875 23.34375 109.417969 22.742188 109.09375 C 10.464844 102.644531 2.089844 89.777344 2.089844 75.007812 C 2.089844 60.238281 10.464844 47.355469 22.742188 40.921875 C 23.335938 40.582031 23.953125 40.273438 24.585938 40.007812 C 29.472656 37.757812 34.902344 36.5 40.625 36.5 L 86.375 36.5 C 92.097656 36.5 97.511719 37.757812 102.398438 40.007812 Z M 103.28125 19.023438 L 103.28125 36.324219 C 103.28125 36.917969 103.21875 37.519531 103.078125 38.078125 C 97.988281 35.765625 92.316406 34.46875 86.375 34.46875 L 74.03125 34.46875 L 74.03125 19.015625 L 103.28125 19.015625 Z M 103.28125 19.023438 "
            />
          </g>
        </svg>
        <rect
          key="1"
          x="0"
          y="0"
          width={WIDTH - 40}
          height={DEPTH - 40}
          style={{
            stroke: element.selected ? "#0096fd" : "transparent",
            strokeWidth: "2px",
            fill: "transparent",
            zIndex: 2000,
            position: "relative",
          }}
        />
        <text
          style={{ transform: "rotateX(180deg)" }}
          transform="rotateX(180deg)"
          fill="#fff"
          fontWeight={"bold"}
          fontSize={50}
          x={130}
          y={-90}
          width={"100"}
        >
          {/* 15 */}
          {element.name}
        </text>
      </g>
    );
  },

  render3D: function (element, layer, scene) {
    let newAltitude = element.properties.get("altitude").get("length");

    var grey = new Three.MeshLambertMaterial({ color: 0xdddddd });
    grey.side = Three.DoubleSide;

    var cestino = new Three.Object3D();

    var cylinderGeometry1 = new Three.CylinderGeometry(0.25, 0.25, 0.0001, 80);
    var p1 = new Three.Mesh(cylinderGeometry1, grey);
    cestino.add(p1);

    var cylinderGeometry2 = new Three.CylinderGeometry(
      0.3,
      0.25,
      0.002,
      80,
      80,
      true
    );
    var p2 = new Three.Mesh(cylinderGeometry2, grey);
    p2.position.set(0, 0.001, 0);
    p1.add(p2);

    let value = new Three.Box3().setFromObject(cestino);

    let deltaX = Math.abs(value.max.x - value.min.x);
    let deltaY = Math.abs(value.max.y - value.min.y);
    let deltaZ = Math.abs(value.max.z - value.min.z);

    if (element.selected) {
      let bbox = new Three.BoxHelper(cestino, 0x99c3fb);
      bbox.material.linewidth = 5;
      bbox.renderOrder = 100;
      bbox.material.depthTest = false;
      cestino.add(bbox);
    }

    cestino.position.y += HEIGHT / 16 + newAltitude;
    cestino.scale.set(
      (1.5 * RADIUS) / deltaX,
      HEIGHT / deltaY,
      (1.5 * RADIUS) / deltaZ
    );

    return Promise.resolve(cestino);
  },
};
